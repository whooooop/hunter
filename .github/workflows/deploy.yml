name: Deploy

on:
  workflow_dispatch:
    inputs:
      application:
        description: 'Application to deploy'
        required: true
        type: choice
        options:
          - server
          - game
          - all

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        timeout-minutes: 1

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
        timeout-minutes: 1

      - name: Create server directories
        if: ${{ github.event.inputs.application == 'server' || github.event.inputs.application == 'all' }}
        run: |
          ssh -i ~/.ssh/deploy_key -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            sudo mkdir -p /opt/${{ vars.APP_NAME }}-server
            sudo chown ${{ secrets.SSH_USER }}:${{ secrets.SSH_USER }} /opt/${{ vars.APP_NAME }}-server
          '
        timeout-minutes: 1

      - name: Create game directories
        if: ${{ github.event.inputs.application == 'game' || github.event.inputs.application == 'all' }}
        run: |
          ssh -i ~/.ssh/deploy_key -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            sudo mkdir -p /opt/${{ vars.APP_NAME }}-game
            sudo chown ${{ secrets.SSH_USER }}:${{ secrets.SSH_USER }} /opt/${{ vars.APP_NAME }}-game
          '
        timeout-minutes: 1

      - name: Deploy Server
        if: ${{ github.event.inputs.application == 'server' || github.event.inputs.application == 'all' }}
        run: |
          docker build -t ${{ vars.APP_NAME }}-server:${{ github.sha }} -f packages/server/Dockerfile .
          docker save -o ${{ vars.APP_NAME }}-server.image.tar ${{ vars.APP_NAME }}-server:${{ github.sha }}
          
          scp -i ~/.ssh/deploy_key -P ${{ secrets.SSH_PORT }} ${{ vars.APP_NAME }}-server.image.tar ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/opt/${{ vars.APP_NAME }}-server/
          
          ssh -i ~/.ssh/deploy_key -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            cd /opt/${{ vars.APP_NAME }}-server
            docker image prune -af
            docker load -i ${{ vars.APP_NAME }}-server.image.tar
            docker stop ${{ vars.APP_NAME }}-server || true
            docker rm ${{ vars.APP_NAME }}-server || true
            docker run \
              -d \
              --restart always \
              --memory 512m \
              --memory-swap 512m \
              --cpus=2 \
              -e METRICS_ACCESS_TOKEN=${{ secrets.METRICS_ACCESS_TOKEN }} \
              -p 3434:3434 \
              --name ${{ vars.APP_NAME }}-server \
              ${{ vars.APP_NAME }}-server:${{ github.sha }}
          '
        timeout-minutes: 2

      - name: Deploy Game
        if: ${{ github.event.inputs.application == 'game' || github.event.inputs.application == 'all' }}
        run: |
          docker build -t ${{ vars.APP_NAME }}-game:${{ github.sha }} -f packages/game/Dockerfile .
          docker save -o ${{ vars.APP_NAME }}-game.image.tar ${{ vars.APP_NAME }}-game:${{ github.sha }}
          
          scp -i ~/.ssh/deploy_key -P ${{ secrets.SSH_PORT }} ${{ vars.APP_NAME }}-game.image.tar ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/opt/${{ vars.APP_NAME }}-game/
          
          ssh -i ~/.ssh/deploy_key -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            cd /opt/${{ vars.APP_NAME }}-game
            docker image prune -af
            docker load -i ${{ vars.APP_NAME }}-game.image.tar
            docker stop ${{ vars.APP_NAME }}-game || true
            docker rm ${{ vars.APP_NAME }}-game || true
            docker run \
              -d \
              --restart always \
              -p 8081:8081 \
              --name ${{ vars.APP_NAME }}-game \
              ${{ vars.APP_NAME }}-game:${{ github.sha }}
            
            echo "Waiting for container to start..."
            sleep 5
            echo "Container logs:"
            docker logs ${{ vars.APP_NAME }}-game
            echo "Container status:"
            docker ps -a | grep ${{ vars.APP_NAME }}-game
          '
        timeout-minutes: 4