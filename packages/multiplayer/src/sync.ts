// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: sync.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "sync";

export enum MessageType {
  Ping = 0,
  SyncCollectionEvent = 1,
  ExportCollectionEvent = 2,
  UNRECOGNIZED = -1,
}

export function messageTypeFromJSON(object: any): MessageType {
  switch (object) {
    case 0:
    case "Ping":
      return MessageType.Ping;
    case 1:
    case "SyncCollectionEvent":
      return MessageType.SyncCollectionEvent;
    case 2:
    case "ExportCollectionEvent":
      return MessageType.ExportCollectionEvent;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MessageType.UNRECOGNIZED;
  }
}

export function messageTypeToJSON(object: MessageType): string {
  switch (object) {
    case MessageType.Ping:
      return "Ping";
    case MessageType.SyncCollectionEvent:
      return "SyncCollectionEvent";
    case MessageType.ExportCollectionEvent:
      return "ExportCollectionEvent";
    case MessageType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum SyncCollectionEvents {
  Add = 0,
  Update = 1,
  Remove = 2,
  UNRECOGNIZED = -1,
}

export function syncCollectionEventsFromJSON(object: any): SyncCollectionEvents {
  switch (object) {
    case 0:
    case "Add":
      return SyncCollectionEvents.Add;
    case 1:
    case "Update":
      return SyncCollectionEvents.Update;
    case 2:
    case "Remove":
      return SyncCollectionEvents.Remove;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SyncCollectionEvents.UNRECOGNIZED;
  }
}

export function syncCollectionEventsToJSON(object: SyncCollectionEvents): string {
  switch (object) {
    case SyncCollectionEvents.Add:
      return "Add";
    case SyncCollectionEvents.Update:
      return "Update";
    case SyncCollectionEvents.Remove:
      return "Remove";
    case SyncCollectionEvents.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message {
  type: MessageType;
  timestamp: string;
  payload: Uint8Array;
}

export interface SyncCollectionMessage {
  event: SyncCollectionEvents;
  collectionId: string;
  itemId: string;
  payload: Uint8Array;
}

export interface ExportCollectionMessage {
  collectionId: string;
  itemIds: string[];
  payload: Uint8Array[];
}

function createBaseMessage(): Message {
  return { type: 0, timestamp: "0", payload: new Uint8Array(0) };
}

export const Message: MessageFns<Message> = {
  encode(message: Message, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.timestamp !== "0") {
      writer.uint32(16).int64(message.timestamp);
    }
    if (message.payload.length !== 0) {
      writer.uint32(26).bytes(message.payload);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.timestamp = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.payload = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message {
    return {
      type: isSet(object.type) ? messageTypeFromJSON(object.type) : 0,
      timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "0",
      payload: isSet(object.payload) ? bytesFromBase64(object.payload) : new Uint8Array(0),
    };
  },

  toJSON(message: Message): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = messageTypeToJSON(message.type);
    }
    if (message.timestamp !== "0") {
      obj.timestamp = message.timestamp;
    }
    if (message.payload.length !== 0) {
      obj.payload = base64FromBytes(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message>, I>>(base?: I): Message {
    return Message.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message>, I>>(object: I): Message {
    const message = createBaseMessage();
    message.type = object.type ?? 0;
    message.timestamp = object.timestamp ?? "0";
    message.payload = object.payload ?? new Uint8Array(0);
    return message;
  },
};

function createBaseSyncCollectionMessage(): SyncCollectionMessage {
  return { event: 0, collectionId: "", itemId: "", payload: new Uint8Array(0) };
}

export const SyncCollectionMessage: MessageFns<SyncCollectionMessage> = {
  encode(message: SyncCollectionMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.event !== 0) {
      writer.uint32(8).int32(message.event);
    }
    if (message.collectionId !== "") {
      writer.uint32(18).string(message.collectionId);
    }
    if (message.itemId !== "") {
      writer.uint32(26).string(message.itemId);
    }
    if (message.payload.length !== 0) {
      writer.uint32(34).bytes(message.payload);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncCollectionMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncCollectionMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.event = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.collectionId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.itemId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.payload = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncCollectionMessage {
    return {
      event: isSet(object.event) ? syncCollectionEventsFromJSON(object.event) : 0,
      collectionId: isSet(object.collectionId) ? globalThis.String(object.collectionId) : "",
      itemId: isSet(object.itemId) ? globalThis.String(object.itemId) : "",
      payload: isSet(object.payload) ? bytesFromBase64(object.payload) : new Uint8Array(0),
    };
  },

  toJSON(message: SyncCollectionMessage): unknown {
    const obj: any = {};
    if (message.event !== 0) {
      obj.event = syncCollectionEventsToJSON(message.event);
    }
    if (message.collectionId !== "") {
      obj.collectionId = message.collectionId;
    }
    if (message.itemId !== "") {
      obj.itemId = message.itemId;
    }
    if (message.payload.length !== 0) {
      obj.payload = base64FromBytes(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncCollectionMessage>, I>>(base?: I): SyncCollectionMessage {
    return SyncCollectionMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncCollectionMessage>, I>>(object: I): SyncCollectionMessage {
    const message = createBaseSyncCollectionMessage();
    message.event = object.event ?? 0;
    message.collectionId = object.collectionId ?? "";
    message.itemId = object.itemId ?? "";
    message.payload = object.payload ?? new Uint8Array(0);
    return message;
  },
};

function createBaseExportCollectionMessage(): ExportCollectionMessage {
  return { collectionId: "", itemIds: [], payload: [] };
}

export const ExportCollectionMessage: MessageFns<ExportCollectionMessage> = {
  encode(message: ExportCollectionMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.collectionId !== "") {
      writer.uint32(10).string(message.collectionId);
    }
    for (const v of message.itemIds) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.payload) {
      writer.uint32(26).bytes(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExportCollectionMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExportCollectionMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.collectionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.itemIds.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.payload.push(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExportCollectionMessage {
    return {
      collectionId: isSet(object.collectionId) ? globalThis.String(object.collectionId) : "",
      itemIds: globalThis.Array.isArray(object?.itemIds) ? object.itemIds.map((e: any) => globalThis.String(e)) : [],
      payload: globalThis.Array.isArray(object?.payload) ? object.payload.map((e: any) => bytesFromBase64(e)) : [],
    };
  },

  toJSON(message: ExportCollectionMessage): unknown {
    const obj: any = {};
    if (message.collectionId !== "") {
      obj.collectionId = message.collectionId;
    }
    if (message.itemIds?.length) {
      obj.itemIds = message.itemIds;
    }
    if (message.payload?.length) {
      obj.payload = message.payload.map((e) => base64FromBytes(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExportCollectionMessage>, I>>(base?: I): ExportCollectionMessage {
    return ExportCollectionMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExportCollectionMessage>, I>>(object: I): ExportCollectionMessage {
    const message = createBaseExportCollectionMessage();
    message.collectionId = object.collectionId ?? "";
    message.itemIds = object.itemIds?.map((e) => e) || [];
    message.payload = object.payload?.map((e) => e) || [];
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
