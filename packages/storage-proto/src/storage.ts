// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: storage.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "game";

export interface ConnectionState {
  ready: boolean;
}

export interface PlayerState {
  positionX: number;
  positionY: number;
  velocityX: number;
  velocityY: number;
  weaponId: string;
}

function createBaseConnectionState(): ConnectionState {
  return { ready: false };
}

export const ConnectionState: MessageFns<ConnectionState> = {
  encode(message: ConnectionState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ready !== false) {
      writer.uint32(8).bool(message.ready);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConnectionState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectionState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.ready = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectionState {
    return { ready: isSet(object.ready) ? globalThis.Boolean(object.ready) : false };
  },

  toJSON(message: ConnectionState): unknown {
    const obj: any = {};
    if (message.ready !== false) {
      obj.ready = message.ready;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConnectionState>, I>>(base?: I): ConnectionState {
    return ConnectionState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConnectionState>, I>>(object: I): ConnectionState {
    const message = createBaseConnectionState();
    message.ready = object.ready ?? false;
    return message;
  },
};

function createBasePlayerState(): PlayerState {
  return { positionX: 0, positionY: 0, velocityX: 0, velocityY: 0, weaponId: "" };
}

export const PlayerState: MessageFns<PlayerState> = {
  encode(message: PlayerState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.positionX !== 0) {
      writer.uint32(13).float(message.positionX);
    }
    if (message.positionY !== 0) {
      writer.uint32(21).float(message.positionY);
    }
    if (message.velocityX !== 0) {
      writer.uint32(29).float(message.velocityX);
    }
    if (message.velocityY !== 0) {
      writer.uint32(37).float(message.velocityY);
    }
    if (message.weaponId !== "") {
      writer.uint32(42).string(message.weaponId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.positionX = reader.float();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.positionY = reader.float();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.velocityX = reader.float();
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.velocityY = reader.float();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.weaponId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerState {
    return {
      positionX: isSet(object.positionX) ? globalThis.Number(object.positionX) : 0,
      positionY: isSet(object.positionY) ? globalThis.Number(object.positionY) : 0,
      velocityX: isSet(object.velocityX) ? globalThis.Number(object.velocityX) : 0,
      velocityY: isSet(object.velocityY) ? globalThis.Number(object.velocityY) : 0,
      weaponId: isSet(object.weaponId) ? globalThis.String(object.weaponId) : "",
    };
  },

  toJSON(message: PlayerState): unknown {
    const obj: any = {};
    if (message.positionX !== 0) {
      obj.positionX = message.positionX;
    }
    if (message.positionY !== 0) {
      obj.positionY = message.positionY;
    }
    if (message.velocityX !== 0) {
      obj.velocityX = message.velocityX;
    }
    if (message.velocityY !== 0) {
      obj.velocityY = message.velocityY;
    }
    if (message.weaponId !== "") {
      obj.weaponId = message.weaponId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerState>, I>>(base?: I): PlayerState {
    return PlayerState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerState>, I>>(object: I): PlayerState {
    const message = createBasePlayerState();
    message.positionX = object.positionX ?? 0;
    message.positionY = object.positionY ?? 0;
    message.velocityX = object.velocityX ?? 0;
    message.velocityY = object.velocityY ?? 0;
    message.weaponId = object.weaponId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
