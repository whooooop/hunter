// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: storage.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "game";

export interface GameState {
  host: string;
  levelId: string;
  createdAt: string;
  playersCount: number;
  paused: boolean;
  started: boolean;
}

export interface WaveState {
  waveIndex: number;
  spawnIndex: number;
  progress: number;
  boss: boolean;
}

export interface ConnectionState {
  ready: boolean;
}

export interface PlayerState {
  x: number;
  y: number;
  vx: number;
  vy: number;
}

export interface PlayerWeapon {
  weaponId: string;
}

export interface EnemyState {
  type: string;
  x: number;
  y: number;
  vx: number;
  vy: number;
  health: number;
  boss: boolean;
  level: number;
}

export interface PlayerScoreState {
  value: number;
}

export interface WeaponState {
  playerId: string;
  type: string;
}

export interface WeaponFireEvent {
  weaponId: string;
  playerId: string;
  originX: number;
  originY: number;
  targetX: number;
  targetY: number;
  angleTilt: number;
}

export interface WeaponReloadEvent {
  weaponId: string;
}

export interface PlayerJumpEvent {
  playerId: string;
}

export interface EnemyAnimationEvent {
  enemyId: string;
  animation: string;
  loop: boolean;
}

export interface EnemyDeathEvent {
}

function createBaseGameState(): GameState {
  return { host: "", levelId: "", createdAt: "0", playersCount: 0, paused: false, started: false };
}

export const GameState: MessageFns<GameState> = {
  encode(message: GameState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.host !== "") {
      writer.uint32(10).string(message.host);
    }
    if (message.levelId !== "") {
      writer.uint32(18).string(message.levelId);
    }
    if (message.createdAt !== "0") {
      writer.uint32(24).int64(message.createdAt);
    }
    if (message.playersCount !== 0) {
      writer.uint32(32).int32(message.playersCount);
    }
    if (message.paused !== false) {
      writer.uint32(40).bool(message.paused);
    }
    if (message.started !== false) {
      writer.uint32(48).bool(message.started);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.host = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.levelId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.createdAt = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.playersCount = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.paused = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.started = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameState {
    return {
      host: isSet(object.host) ? globalThis.String(object.host) : "",
      levelId: isSet(object.levelId) ? globalThis.String(object.levelId) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "0",
      playersCount: isSet(object.playersCount) ? globalThis.Number(object.playersCount) : 0,
      paused: isSet(object.paused) ? globalThis.Boolean(object.paused) : false,
      started: isSet(object.started) ? globalThis.Boolean(object.started) : false,
    };
  },

  toJSON(message: GameState): unknown {
    const obj: any = {};
    if (message.host !== "") {
      obj.host = message.host;
    }
    if (message.levelId !== "") {
      obj.levelId = message.levelId;
    }
    if (message.createdAt !== "0") {
      obj.createdAt = message.createdAt;
    }
    if (message.playersCount !== 0) {
      obj.playersCount = Math.round(message.playersCount);
    }
    if (message.paused !== false) {
      obj.paused = message.paused;
    }
    if (message.started !== false) {
      obj.started = message.started;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameState>, I>>(base?: I): GameState {
    return GameState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameState>, I>>(object: I): GameState {
    const message = createBaseGameState();
    message.host = object.host ?? "";
    message.levelId = object.levelId ?? "";
    message.createdAt = object.createdAt ?? "0";
    message.playersCount = object.playersCount ?? 0;
    message.paused = object.paused ?? false;
    message.started = object.started ?? false;
    return message;
  },
};

function createBaseWaveState(): WaveState {
  return { waveIndex: 0, spawnIndex: 0, progress: 0, boss: false };
}

export const WaveState: MessageFns<WaveState> = {
  encode(message: WaveState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.waveIndex !== 0) {
      writer.uint32(8).int32(message.waveIndex);
    }
    if (message.spawnIndex !== 0) {
      writer.uint32(16).int32(message.spawnIndex);
    }
    if (message.progress !== 0) {
      writer.uint32(24).int32(message.progress);
    }
    if (message.boss !== false) {
      writer.uint32(32).bool(message.boss);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WaveState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWaveState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.waveIndex = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.spawnIndex = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.progress = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.boss = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WaveState {
    return {
      waveIndex: isSet(object.waveIndex) ? globalThis.Number(object.waveIndex) : 0,
      spawnIndex: isSet(object.spawnIndex) ? globalThis.Number(object.spawnIndex) : 0,
      progress: isSet(object.progress) ? globalThis.Number(object.progress) : 0,
      boss: isSet(object.boss) ? globalThis.Boolean(object.boss) : false,
    };
  },

  toJSON(message: WaveState): unknown {
    const obj: any = {};
    if (message.waveIndex !== 0) {
      obj.waveIndex = Math.round(message.waveIndex);
    }
    if (message.spawnIndex !== 0) {
      obj.spawnIndex = Math.round(message.spawnIndex);
    }
    if (message.progress !== 0) {
      obj.progress = Math.round(message.progress);
    }
    if (message.boss !== false) {
      obj.boss = message.boss;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WaveState>, I>>(base?: I): WaveState {
    return WaveState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WaveState>, I>>(object: I): WaveState {
    const message = createBaseWaveState();
    message.waveIndex = object.waveIndex ?? 0;
    message.spawnIndex = object.spawnIndex ?? 0;
    message.progress = object.progress ?? 0;
    message.boss = object.boss ?? false;
    return message;
  },
};

function createBaseConnectionState(): ConnectionState {
  return { ready: false };
}

export const ConnectionState: MessageFns<ConnectionState> = {
  encode(message: ConnectionState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ready !== false) {
      writer.uint32(8).bool(message.ready);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConnectionState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectionState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.ready = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectionState {
    return { ready: isSet(object.ready) ? globalThis.Boolean(object.ready) : false };
  },

  toJSON(message: ConnectionState): unknown {
    const obj: any = {};
    if (message.ready !== false) {
      obj.ready = message.ready;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConnectionState>, I>>(base?: I): ConnectionState {
    return ConnectionState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConnectionState>, I>>(object: I): ConnectionState {
    const message = createBaseConnectionState();
    message.ready = object.ready ?? false;
    return message;
  },
};

function createBasePlayerState(): PlayerState {
  return { x: 0, y: 0, vx: 0, vy: 0 };
}

export const PlayerState: MessageFns<PlayerState> = {
  encode(message: PlayerState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x !== 0) {
      writer.uint32(13).float(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(21).float(message.y);
    }
    if (message.vx !== 0) {
      writer.uint32(29).float(message.vx);
    }
    if (message.vy !== 0) {
      writer.uint32(37).float(message.vy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.x = reader.float();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.y = reader.float();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.vx = reader.float();
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.vy = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerState {
    return {
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
      vx: isSet(object.vx) ? globalThis.Number(object.vx) : 0,
      vy: isSet(object.vy) ? globalThis.Number(object.vy) : 0,
    };
  },

  toJSON(message: PlayerState): unknown {
    const obj: any = {};
    if (message.x !== 0) {
      obj.x = message.x;
    }
    if (message.y !== 0) {
      obj.y = message.y;
    }
    if (message.vx !== 0) {
      obj.vx = message.vx;
    }
    if (message.vy !== 0) {
      obj.vy = message.vy;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerState>, I>>(base?: I): PlayerState {
    return PlayerState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerState>, I>>(object: I): PlayerState {
    const message = createBasePlayerState();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.vx = object.vx ?? 0;
    message.vy = object.vy ?? 0;
    return message;
  },
};

function createBasePlayerWeapon(): PlayerWeapon {
  return { weaponId: "" };
}

export const PlayerWeapon: MessageFns<PlayerWeapon> = {
  encode(message: PlayerWeapon, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.weaponId !== "") {
      writer.uint32(10).string(message.weaponId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerWeapon {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerWeapon();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.weaponId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerWeapon {
    return { weaponId: isSet(object.weaponId) ? globalThis.String(object.weaponId) : "" };
  },

  toJSON(message: PlayerWeapon): unknown {
    const obj: any = {};
    if (message.weaponId !== "") {
      obj.weaponId = message.weaponId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerWeapon>, I>>(base?: I): PlayerWeapon {
    return PlayerWeapon.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerWeapon>, I>>(object: I): PlayerWeapon {
    const message = createBasePlayerWeapon();
    message.weaponId = object.weaponId ?? "";
    return message;
  },
};

function createBaseEnemyState(): EnemyState {
  return { type: "", x: 0, y: 0, vx: 0, vy: 0, health: 0, boss: false, level: 0 };
}

export const EnemyState: MessageFns<EnemyState> = {
  encode(message: EnemyState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.x !== 0) {
      writer.uint32(21).float(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(29).float(message.y);
    }
    if (message.vx !== 0) {
      writer.uint32(37).float(message.vx);
    }
    if (message.vy !== 0) {
      writer.uint32(45).float(message.vy);
    }
    if (message.health !== 0) {
      writer.uint32(53).float(message.health);
    }
    if (message.boss !== false) {
      writer.uint32(56).bool(message.boss);
    }
    if (message.level !== 0) {
      writer.uint32(64).int32(message.level);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnemyState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnemyState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.x = reader.float();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.y = reader.float();
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.vx = reader.float();
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.vy = reader.float();
          continue;
        }
        case 6: {
          if (tag !== 53) {
            break;
          }

          message.health = reader.float();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.boss = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.level = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnemyState {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
      vx: isSet(object.vx) ? globalThis.Number(object.vx) : 0,
      vy: isSet(object.vy) ? globalThis.Number(object.vy) : 0,
      health: isSet(object.health) ? globalThis.Number(object.health) : 0,
      boss: isSet(object.boss) ? globalThis.Boolean(object.boss) : false,
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
    };
  },

  toJSON(message: EnemyState): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.x !== 0) {
      obj.x = message.x;
    }
    if (message.y !== 0) {
      obj.y = message.y;
    }
    if (message.vx !== 0) {
      obj.vx = message.vx;
    }
    if (message.vy !== 0) {
      obj.vy = message.vy;
    }
    if (message.health !== 0) {
      obj.health = message.health;
    }
    if (message.boss !== false) {
      obj.boss = message.boss;
    }
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EnemyState>, I>>(base?: I): EnemyState {
    return EnemyState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EnemyState>, I>>(object: I): EnemyState {
    const message = createBaseEnemyState();
    message.type = object.type ?? "";
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.vx = object.vx ?? 0;
    message.vy = object.vy ?? 0;
    message.health = object.health ?? 0;
    message.boss = object.boss ?? false;
    message.level = object.level ?? 0;
    return message;
  },
};

function createBasePlayerScoreState(): PlayerScoreState {
  return { value: 0 };
}

export const PlayerScoreState: MessageFns<PlayerScoreState> = {
  encode(message: PlayerScoreState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(8).int32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerScoreState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerScoreState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.value = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerScoreState {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: PlayerScoreState): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerScoreState>, I>>(base?: I): PlayerScoreState {
    return PlayerScoreState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerScoreState>, I>>(object: I): PlayerScoreState {
    const message = createBasePlayerScoreState();
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseWeaponState(): WeaponState {
  return { playerId: "", type: "" };
}

export const WeaponState: MessageFns<WeaponState> = {
  encode(message: WeaponState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== "") {
      writer.uint32(18).string(message.playerId);
    }
    if (message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WeaponState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWeaponState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WeaponState {
    return {
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
    };
  },

  toJSON(message: WeaponState): unknown {
    const obj: any = {};
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WeaponState>, I>>(base?: I): WeaponState {
    return WeaponState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WeaponState>, I>>(object: I): WeaponState {
    const message = createBaseWeaponState();
    message.playerId = object.playerId ?? "";
    message.type = object.type ?? "";
    return message;
  },
};

function createBaseWeaponFireEvent(): WeaponFireEvent {
  return { weaponId: "", playerId: "", originX: 0, originY: 0, targetX: 0, targetY: 0, angleTilt: 0 };
}

export const WeaponFireEvent: MessageFns<WeaponFireEvent> = {
  encode(message: WeaponFireEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.weaponId !== "") {
      writer.uint32(10).string(message.weaponId);
    }
    if (message.playerId !== "") {
      writer.uint32(18).string(message.playerId);
    }
    if (message.originX !== 0) {
      writer.uint32(29).float(message.originX);
    }
    if (message.originY !== 0) {
      writer.uint32(37).float(message.originY);
    }
    if (message.targetX !== 0) {
      writer.uint32(45).float(message.targetX);
    }
    if (message.targetY !== 0) {
      writer.uint32(53).float(message.targetY);
    }
    if (message.angleTilt !== 0) {
      writer.uint32(61).float(message.angleTilt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WeaponFireEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWeaponFireEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.weaponId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.originX = reader.float();
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.originY = reader.float();
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.targetX = reader.float();
          continue;
        }
        case 6: {
          if (tag !== 53) {
            break;
          }

          message.targetY = reader.float();
          continue;
        }
        case 7: {
          if (tag !== 61) {
            break;
          }

          message.angleTilt = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WeaponFireEvent {
    return {
      weaponId: isSet(object.weaponId) ? globalThis.String(object.weaponId) : "",
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      originX: isSet(object.originX) ? globalThis.Number(object.originX) : 0,
      originY: isSet(object.originY) ? globalThis.Number(object.originY) : 0,
      targetX: isSet(object.targetX) ? globalThis.Number(object.targetX) : 0,
      targetY: isSet(object.targetY) ? globalThis.Number(object.targetY) : 0,
      angleTilt: isSet(object.angleTilt) ? globalThis.Number(object.angleTilt) : 0,
    };
  },

  toJSON(message: WeaponFireEvent): unknown {
    const obj: any = {};
    if (message.weaponId !== "") {
      obj.weaponId = message.weaponId;
    }
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.originX !== 0) {
      obj.originX = message.originX;
    }
    if (message.originY !== 0) {
      obj.originY = message.originY;
    }
    if (message.targetX !== 0) {
      obj.targetX = message.targetX;
    }
    if (message.targetY !== 0) {
      obj.targetY = message.targetY;
    }
    if (message.angleTilt !== 0) {
      obj.angleTilt = message.angleTilt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WeaponFireEvent>, I>>(base?: I): WeaponFireEvent {
    return WeaponFireEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WeaponFireEvent>, I>>(object: I): WeaponFireEvent {
    const message = createBaseWeaponFireEvent();
    message.weaponId = object.weaponId ?? "";
    message.playerId = object.playerId ?? "";
    message.originX = object.originX ?? 0;
    message.originY = object.originY ?? 0;
    message.targetX = object.targetX ?? 0;
    message.targetY = object.targetY ?? 0;
    message.angleTilt = object.angleTilt ?? 0;
    return message;
  },
};

function createBaseWeaponReloadEvent(): WeaponReloadEvent {
  return { weaponId: "" };
}

export const WeaponReloadEvent: MessageFns<WeaponReloadEvent> = {
  encode(message: WeaponReloadEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.weaponId !== "") {
      writer.uint32(10).string(message.weaponId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WeaponReloadEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWeaponReloadEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.weaponId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WeaponReloadEvent {
    return { weaponId: isSet(object.weaponId) ? globalThis.String(object.weaponId) : "" };
  },

  toJSON(message: WeaponReloadEvent): unknown {
    const obj: any = {};
    if (message.weaponId !== "") {
      obj.weaponId = message.weaponId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WeaponReloadEvent>, I>>(base?: I): WeaponReloadEvent {
    return WeaponReloadEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WeaponReloadEvent>, I>>(object: I): WeaponReloadEvent {
    const message = createBaseWeaponReloadEvent();
    message.weaponId = object.weaponId ?? "";
    return message;
  },
};

function createBasePlayerJumpEvent(): PlayerJumpEvent {
  return { playerId: "" };
}

export const PlayerJumpEvent: MessageFns<PlayerJumpEvent> = {
  encode(message: PlayerJumpEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerJumpEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerJumpEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerJumpEvent {
    return { playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "" };
  },

  toJSON(message: PlayerJumpEvent): unknown {
    const obj: any = {};
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerJumpEvent>, I>>(base?: I): PlayerJumpEvent {
    return PlayerJumpEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerJumpEvent>, I>>(object: I): PlayerJumpEvent {
    const message = createBasePlayerJumpEvent();
    message.playerId = object.playerId ?? "";
    return message;
  },
};

function createBaseEnemyAnimationEvent(): EnemyAnimationEvent {
  return { enemyId: "", animation: "", loop: false };
}

export const EnemyAnimationEvent: MessageFns<EnemyAnimationEvent> = {
  encode(message: EnemyAnimationEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enemyId !== "") {
      writer.uint32(10).string(message.enemyId);
    }
    if (message.animation !== "") {
      writer.uint32(18).string(message.animation);
    }
    if (message.loop !== false) {
      writer.uint32(24).bool(message.loop);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnemyAnimationEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnemyAnimationEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.enemyId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.animation = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.loop = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnemyAnimationEvent {
    return {
      enemyId: isSet(object.enemyId) ? globalThis.String(object.enemyId) : "",
      animation: isSet(object.animation) ? globalThis.String(object.animation) : "",
      loop: isSet(object.loop) ? globalThis.Boolean(object.loop) : false,
    };
  },

  toJSON(message: EnemyAnimationEvent): unknown {
    const obj: any = {};
    if (message.enemyId !== "") {
      obj.enemyId = message.enemyId;
    }
    if (message.animation !== "") {
      obj.animation = message.animation;
    }
    if (message.loop !== false) {
      obj.loop = message.loop;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EnemyAnimationEvent>, I>>(base?: I): EnemyAnimationEvent {
    return EnemyAnimationEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EnemyAnimationEvent>, I>>(object: I): EnemyAnimationEvent {
    const message = createBaseEnemyAnimationEvent();
    message.enemyId = object.enemyId ?? "";
    message.animation = object.animation ?? "";
    message.loop = object.loop ?? false;
    return message;
  },
};

function createBaseEnemyDeathEvent(): EnemyDeathEvent {
  return {};
}

export const EnemyDeathEvent: MessageFns<EnemyDeathEvent> = {
  encode(_: EnemyDeathEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnemyDeathEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnemyDeathEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): EnemyDeathEvent {
    return {};
  },

  toJSON(_: EnemyDeathEvent): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<EnemyDeathEvent>, I>>(base?: I): EnemyDeathEvent {
    return EnemyDeathEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EnemyDeathEvent>, I>>(_: I): EnemyDeathEvent {
    const message = createBaseEnemyDeathEvent();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
