// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: game.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "game";

export enum ProtoEventType {
  JoinGame = 0,
  PlayerJoined = 1,
  WeaponFireAction = 2,
  WaveStart = 3,
  SpawnEnemy = 4,
  EnemyDeath = 5,
  PlayerScoreUpdate = 6,
  PlayerSetWeapon = 7,
  WeaponPurchased = 8,
  PlayerStateEvent = 9,
  UNRECOGNIZED = -1,
}

export function protoEventTypeFromJSON(object: any): ProtoEventType {
  switch (object) {
    case 0:
    case "JoinGame":
      return ProtoEventType.JoinGame;
    case 1:
    case "PlayerJoined":
      return ProtoEventType.PlayerJoined;
    case 2:
    case "WeaponFireAction":
      return ProtoEventType.WeaponFireAction;
    case 3:
    case "WaveStart":
      return ProtoEventType.WaveStart;
    case 4:
    case "SpawnEnemy":
      return ProtoEventType.SpawnEnemy;
    case 5:
    case "EnemyDeath":
      return ProtoEventType.EnemyDeath;
    case 6:
    case "PlayerScoreUpdate":
      return ProtoEventType.PlayerScoreUpdate;
    case 7:
    case "PlayerSetWeapon":
      return ProtoEventType.PlayerSetWeapon;
    case 8:
    case "WeaponPurchased":
      return ProtoEventType.WeaponPurchased;
    case 9:
    case "PlayerStateEvent":
      return ProtoEventType.PlayerStateEvent;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ProtoEventType.UNRECOGNIZED;
  }
}

export function protoEventTypeToJSON(object: ProtoEventType): string {
  switch (object) {
    case ProtoEventType.JoinGame:
      return "JoinGame";
    case ProtoEventType.PlayerJoined:
      return "PlayerJoined";
    case ProtoEventType.WeaponFireAction:
      return "WeaponFireAction";
    case ProtoEventType.WaveStart:
      return "WaveStart";
    case ProtoEventType.SpawnEnemy:
      return "SpawnEnemy";
    case ProtoEventType.EnemyDeath:
      return "EnemyDeath";
    case ProtoEventType.PlayerScoreUpdate:
      return "PlayerScoreUpdate";
    case ProtoEventType.PlayerSetWeapon:
      return "PlayerSetWeapon";
    case ProtoEventType.WeaponPurchased:
      return "WeaponPurchased";
    case ProtoEventType.PlayerStateEvent:
      return "PlayerStateEvent";
    case ProtoEventType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Базовые типы */
export interface Point {
  x: number;
  y: number;
}

export interface Event {
  eventType: ProtoEventType;
}

export interface EventJoinGame {
  eventType: ProtoEventType;
  playerId: string;
}

export interface EventPlayerJoined {
  eventType: ProtoEventType;
  playerId: string;
  isHost: boolean;
}

export interface EventWeaponFireAction {
  eventType: ProtoEventType;
  playerId: string;
  weaponId: string;
  originPoint: Point | undefined;
  targetPoint: Point | undefined;
  angleTilt: number;
}

export interface EventWaveStart {
  eventType: ProtoEventType;
  number: number;
  duration: number;
}

export interface EventPlayerState {
  eventType: ProtoEventType;
  playerId: string;
  position: Point | undefined;
}

export interface EventSpawnEnemy {
  eventType: ProtoEventType;
  id: string;
  enemyType: string;
  position: Point | undefined;
}

export interface EventEnemyDeath {
  eventType: ProtoEventType;
  id: string;
}

export interface EventPlayerSetWeapon {
  eventType: ProtoEventType;
  playerId: string;
  weaponId: string;
  weaponType: string;
}

export interface EventWeaponPurchased {
  eventType: ProtoEventType;
  playerId: string;
  weaponType: string;
  price: number;
}

export interface EventPlayerScoreUpdate {
  eventType: ProtoEventType;
  playerId: string;
  score: number;
}

function createBasePoint(): Point {
  return { x: 0, y: 0 };
}

export const Point: MessageFns<Point> = {
  encode(message: Point, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x !== 0) {
      writer.uint32(13).float(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(21).float(message.y);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Point {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.x = reader.float();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.y = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Point {
    return {
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
    };
  },

  toJSON(message: Point): unknown {
    const obj: any = {};
    if (message.x !== 0) {
      obj.x = message.x;
    }
    if (message.y !== 0) {
      obj.y = message.y;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Point>, I>>(base?: I): Point {
    return Point.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Point>, I>>(object: I): Point {
    const message = createBasePoint();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    return message;
  },
};

function createBaseEvent(): Event {
  return { eventType: 0 };
}

export const Event: MessageFns<Event> = {
  encode(message: Event, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventType !== 0) {
      writer.uint32(8).int32(message.eventType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Event {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.eventType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event {
    return { eventType: isSet(object.eventType) ? protoEventTypeFromJSON(object.eventType) : 0 };
  },

  toJSON(message: Event): unknown {
    const obj: any = {};
    if (message.eventType !== 0) {
      obj.eventType = protoEventTypeToJSON(message.eventType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Event>, I>>(base?: I): Event {
    return Event.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Event>, I>>(object: I): Event {
    const message = createBaseEvent();
    message.eventType = object.eventType ?? 0;
    return message;
  },
};

function createBaseEventJoinGame(): EventJoinGame {
  return { eventType: 0, playerId: "" };
}

export const EventJoinGame: MessageFns<EventJoinGame> = {
  encode(message: EventJoinGame, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventType !== 0) {
      writer.uint32(8).int32(message.eventType);
    }
    if (message.playerId !== "") {
      writer.uint32(18).string(message.playerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventJoinGame {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventJoinGame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.eventType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventJoinGame {
    return {
      eventType: isSet(object.eventType) ? protoEventTypeFromJSON(object.eventType) : 0,
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
    };
  },

  toJSON(message: EventJoinGame): unknown {
    const obj: any = {};
    if (message.eventType !== 0) {
      obj.eventType = protoEventTypeToJSON(message.eventType);
    }
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventJoinGame>, I>>(base?: I): EventJoinGame {
    return EventJoinGame.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventJoinGame>, I>>(object: I): EventJoinGame {
    const message = createBaseEventJoinGame();
    message.eventType = object.eventType ?? 0;
    message.playerId = object.playerId ?? "";
    return message;
  },
};

function createBaseEventPlayerJoined(): EventPlayerJoined {
  return { eventType: 0, playerId: "", isHost: false };
}

export const EventPlayerJoined: MessageFns<EventPlayerJoined> = {
  encode(message: EventPlayerJoined, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventType !== 0) {
      writer.uint32(8).int32(message.eventType);
    }
    if (message.playerId !== "") {
      writer.uint32(18).string(message.playerId);
    }
    if (message.isHost !== false) {
      writer.uint32(24).bool(message.isHost);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventPlayerJoined {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventPlayerJoined();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.eventType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isHost = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventPlayerJoined {
    return {
      eventType: isSet(object.eventType) ? protoEventTypeFromJSON(object.eventType) : 0,
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      isHost: isSet(object.isHost) ? globalThis.Boolean(object.isHost) : false,
    };
  },

  toJSON(message: EventPlayerJoined): unknown {
    const obj: any = {};
    if (message.eventType !== 0) {
      obj.eventType = protoEventTypeToJSON(message.eventType);
    }
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.isHost !== false) {
      obj.isHost = message.isHost;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventPlayerJoined>, I>>(base?: I): EventPlayerJoined {
    return EventPlayerJoined.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventPlayerJoined>, I>>(object: I): EventPlayerJoined {
    const message = createBaseEventPlayerJoined();
    message.eventType = object.eventType ?? 0;
    message.playerId = object.playerId ?? "";
    message.isHost = object.isHost ?? false;
    return message;
  },
};

function createBaseEventWeaponFireAction(): EventWeaponFireAction {
  return { eventType: 0, playerId: "", weaponId: "", originPoint: undefined, targetPoint: undefined, angleTilt: 0 };
}

export const EventWeaponFireAction: MessageFns<EventWeaponFireAction> = {
  encode(message: EventWeaponFireAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventType !== 0) {
      writer.uint32(8).int32(message.eventType);
    }
    if (message.playerId !== "") {
      writer.uint32(18).string(message.playerId);
    }
    if (message.weaponId !== "") {
      writer.uint32(26).string(message.weaponId);
    }
    if (message.originPoint !== undefined) {
      Point.encode(message.originPoint, writer.uint32(50).fork()).join();
    }
    if (message.targetPoint !== undefined) {
      Point.encode(message.targetPoint, writer.uint32(58).fork()).join();
    }
    if (message.angleTilt !== 0) {
      writer.uint32(69).float(message.angleTilt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventWeaponFireAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventWeaponFireAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.eventType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.weaponId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.originPoint = Point.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.targetPoint = Point.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 69) {
            break;
          }

          message.angleTilt = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventWeaponFireAction {
    return {
      eventType: isSet(object.eventType) ? protoEventTypeFromJSON(object.eventType) : 0,
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      weaponId: isSet(object.weaponId) ? globalThis.String(object.weaponId) : "",
      originPoint: isSet(object.originPoint) ? Point.fromJSON(object.originPoint) : undefined,
      targetPoint: isSet(object.targetPoint) ? Point.fromJSON(object.targetPoint) : undefined,
      angleTilt: isSet(object.angleTilt) ? globalThis.Number(object.angleTilt) : 0,
    };
  },

  toJSON(message: EventWeaponFireAction): unknown {
    const obj: any = {};
    if (message.eventType !== 0) {
      obj.eventType = protoEventTypeToJSON(message.eventType);
    }
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.weaponId !== "") {
      obj.weaponId = message.weaponId;
    }
    if (message.originPoint !== undefined) {
      obj.originPoint = Point.toJSON(message.originPoint);
    }
    if (message.targetPoint !== undefined) {
      obj.targetPoint = Point.toJSON(message.targetPoint);
    }
    if (message.angleTilt !== 0) {
      obj.angleTilt = message.angleTilt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventWeaponFireAction>, I>>(base?: I): EventWeaponFireAction {
    return EventWeaponFireAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventWeaponFireAction>, I>>(object: I): EventWeaponFireAction {
    const message = createBaseEventWeaponFireAction();
    message.eventType = object.eventType ?? 0;
    message.playerId = object.playerId ?? "";
    message.weaponId = object.weaponId ?? "";
    message.originPoint = (object.originPoint !== undefined && object.originPoint !== null)
      ? Point.fromPartial(object.originPoint)
      : undefined;
    message.targetPoint = (object.targetPoint !== undefined && object.targetPoint !== null)
      ? Point.fromPartial(object.targetPoint)
      : undefined;
    message.angleTilt = object.angleTilt ?? 0;
    return message;
  },
};

function createBaseEventWaveStart(): EventWaveStart {
  return { eventType: 0, number: 0, duration: 0 };
}

export const EventWaveStart: MessageFns<EventWaveStart> = {
  encode(message: EventWaveStart, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventType !== 0) {
      writer.uint32(8).int32(message.eventType);
    }
    if (message.number !== 0) {
      writer.uint32(16).int32(message.number);
    }
    if (message.duration !== 0) {
      writer.uint32(24).int32(message.duration);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventWaveStart {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventWaveStart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.eventType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.number = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.duration = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventWaveStart {
    return {
      eventType: isSet(object.eventType) ? protoEventTypeFromJSON(object.eventType) : 0,
      number: isSet(object.number) ? globalThis.Number(object.number) : 0,
      duration: isSet(object.duration) ? globalThis.Number(object.duration) : 0,
    };
  },

  toJSON(message: EventWaveStart): unknown {
    const obj: any = {};
    if (message.eventType !== 0) {
      obj.eventType = protoEventTypeToJSON(message.eventType);
    }
    if (message.number !== 0) {
      obj.number = Math.round(message.number);
    }
    if (message.duration !== 0) {
      obj.duration = Math.round(message.duration);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventWaveStart>, I>>(base?: I): EventWaveStart {
    return EventWaveStart.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventWaveStart>, I>>(object: I): EventWaveStart {
    const message = createBaseEventWaveStart();
    message.eventType = object.eventType ?? 0;
    message.number = object.number ?? 0;
    message.duration = object.duration ?? 0;
    return message;
  },
};

function createBaseEventPlayerState(): EventPlayerState {
  return { eventType: 0, playerId: "", position: undefined };
}

export const EventPlayerState: MessageFns<EventPlayerState> = {
  encode(message: EventPlayerState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventType !== 0) {
      writer.uint32(8).int32(message.eventType);
    }
    if (message.playerId !== "") {
      writer.uint32(18).string(message.playerId);
    }
    if (message.position !== undefined) {
      Point.encode(message.position, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventPlayerState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventPlayerState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.eventType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.position = Point.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventPlayerState {
    return {
      eventType: isSet(object.eventType) ? protoEventTypeFromJSON(object.eventType) : 0,
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      position: isSet(object.position) ? Point.fromJSON(object.position) : undefined,
    };
  },

  toJSON(message: EventPlayerState): unknown {
    const obj: any = {};
    if (message.eventType !== 0) {
      obj.eventType = protoEventTypeToJSON(message.eventType);
    }
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.position !== undefined) {
      obj.position = Point.toJSON(message.position);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventPlayerState>, I>>(base?: I): EventPlayerState {
    return EventPlayerState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventPlayerState>, I>>(object: I): EventPlayerState {
    const message = createBaseEventPlayerState();
    message.eventType = object.eventType ?? 0;
    message.playerId = object.playerId ?? "";
    message.position = (object.position !== undefined && object.position !== null)
      ? Point.fromPartial(object.position)
      : undefined;
    return message;
  },
};

function createBaseEventSpawnEnemy(): EventSpawnEnemy {
  return { eventType: 0, id: "", enemyType: "", position: undefined };
}

export const EventSpawnEnemy: MessageFns<EventSpawnEnemy> = {
  encode(message: EventSpawnEnemy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventType !== 0) {
      writer.uint32(8).int32(message.eventType);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.enemyType !== "") {
      writer.uint32(26).string(message.enemyType);
    }
    if (message.position !== undefined) {
      Point.encode(message.position, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventSpawnEnemy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventSpawnEnemy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.eventType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.enemyType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.position = Point.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventSpawnEnemy {
    return {
      eventType: isSet(object.eventType) ? protoEventTypeFromJSON(object.eventType) : 0,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      enemyType: isSet(object.enemyType) ? globalThis.String(object.enemyType) : "",
      position: isSet(object.position) ? Point.fromJSON(object.position) : undefined,
    };
  },

  toJSON(message: EventSpawnEnemy): unknown {
    const obj: any = {};
    if (message.eventType !== 0) {
      obj.eventType = protoEventTypeToJSON(message.eventType);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.enemyType !== "") {
      obj.enemyType = message.enemyType;
    }
    if (message.position !== undefined) {
      obj.position = Point.toJSON(message.position);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventSpawnEnemy>, I>>(base?: I): EventSpawnEnemy {
    return EventSpawnEnemy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventSpawnEnemy>, I>>(object: I): EventSpawnEnemy {
    const message = createBaseEventSpawnEnemy();
    message.eventType = object.eventType ?? 0;
    message.id = object.id ?? "";
    message.enemyType = object.enemyType ?? "";
    message.position = (object.position !== undefined && object.position !== null)
      ? Point.fromPartial(object.position)
      : undefined;
    return message;
  },
};

function createBaseEventEnemyDeath(): EventEnemyDeath {
  return { eventType: 0, id: "" };
}

export const EventEnemyDeath: MessageFns<EventEnemyDeath> = {
  encode(message: EventEnemyDeath, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventType !== 0) {
      writer.uint32(8).int32(message.eventType);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventEnemyDeath {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventEnemyDeath();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.eventType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventEnemyDeath {
    return {
      eventType: isSet(object.eventType) ? protoEventTypeFromJSON(object.eventType) : 0,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: EventEnemyDeath): unknown {
    const obj: any = {};
    if (message.eventType !== 0) {
      obj.eventType = protoEventTypeToJSON(message.eventType);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventEnemyDeath>, I>>(base?: I): EventEnemyDeath {
    return EventEnemyDeath.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventEnemyDeath>, I>>(object: I): EventEnemyDeath {
    const message = createBaseEventEnemyDeath();
    message.eventType = object.eventType ?? 0;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseEventPlayerSetWeapon(): EventPlayerSetWeapon {
  return { eventType: 0, playerId: "", weaponId: "", weaponType: "" };
}

export const EventPlayerSetWeapon: MessageFns<EventPlayerSetWeapon> = {
  encode(message: EventPlayerSetWeapon, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventType !== 0) {
      writer.uint32(8).int32(message.eventType);
    }
    if (message.playerId !== "") {
      writer.uint32(18).string(message.playerId);
    }
    if (message.weaponId !== "") {
      writer.uint32(26).string(message.weaponId);
    }
    if (message.weaponType !== "") {
      writer.uint32(34).string(message.weaponType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventPlayerSetWeapon {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventPlayerSetWeapon();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.eventType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.weaponId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.weaponType = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventPlayerSetWeapon {
    return {
      eventType: isSet(object.eventType) ? protoEventTypeFromJSON(object.eventType) : 0,
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      weaponId: isSet(object.weaponId) ? globalThis.String(object.weaponId) : "",
      weaponType: isSet(object.weaponType) ? globalThis.String(object.weaponType) : "",
    };
  },

  toJSON(message: EventPlayerSetWeapon): unknown {
    const obj: any = {};
    if (message.eventType !== 0) {
      obj.eventType = protoEventTypeToJSON(message.eventType);
    }
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.weaponId !== "") {
      obj.weaponId = message.weaponId;
    }
    if (message.weaponType !== "") {
      obj.weaponType = message.weaponType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventPlayerSetWeapon>, I>>(base?: I): EventPlayerSetWeapon {
    return EventPlayerSetWeapon.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventPlayerSetWeapon>, I>>(object: I): EventPlayerSetWeapon {
    const message = createBaseEventPlayerSetWeapon();
    message.eventType = object.eventType ?? 0;
    message.playerId = object.playerId ?? "";
    message.weaponId = object.weaponId ?? "";
    message.weaponType = object.weaponType ?? "";
    return message;
  },
};

function createBaseEventWeaponPurchased(): EventWeaponPurchased {
  return { eventType: 0, playerId: "", weaponType: "", price: 0 };
}

export const EventWeaponPurchased: MessageFns<EventWeaponPurchased> = {
  encode(message: EventWeaponPurchased, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventType !== 0) {
      writer.uint32(8).int32(message.eventType);
    }
    if (message.playerId !== "") {
      writer.uint32(18).string(message.playerId);
    }
    if (message.weaponType !== "") {
      writer.uint32(26).string(message.weaponType);
    }
    if (message.price !== 0) {
      writer.uint32(32).int32(message.price);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventWeaponPurchased {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventWeaponPurchased();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.eventType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.weaponType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.price = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventWeaponPurchased {
    return {
      eventType: isSet(object.eventType) ? protoEventTypeFromJSON(object.eventType) : 0,
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      weaponType: isSet(object.weaponType) ? globalThis.String(object.weaponType) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
    };
  },

  toJSON(message: EventWeaponPurchased): unknown {
    const obj: any = {};
    if (message.eventType !== 0) {
      obj.eventType = protoEventTypeToJSON(message.eventType);
    }
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.weaponType !== "") {
      obj.weaponType = message.weaponType;
    }
    if (message.price !== 0) {
      obj.price = Math.round(message.price);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventWeaponPurchased>, I>>(base?: I): EventWeaponPurchased {
    return EventWeaponPurchased.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventWeaponPurchased>, I>>(object: I): EventWeaponPurchased {
    const message = createBaseEventWeaponPurchased();
    message.eventType = object.eventType ?? 0;
    message.playerId = object.playerId ?? "";
    message.weaponType = object.weaponType ?? "";
    message.price = object.price ?? 0;
    return message;
  },
};

function createBaseEventPlayerScoreUpdate(): EventPlayerScoreUpdate {
  return { eventType: 0, playerId: "", score: 0 };
}

export const EventPlayerScoreUpdate: MessageFns<EventPlayerScoreUpdate> = {
  encode(message: EventPlayerScoreUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventType !== 0) {
      writer.uint32(8).int32(message.eventType);
    }
    if (message.playerId !== "") {
      writer.uint32(18).string(message.playerId);
    }
    if (message.score !== 0) {
      writer.uint32(24).int32(message.score);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventPlayerScoreUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventPlayerScoreUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.eventType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.score = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventPlayerScoreUpdate {
    return {
      eventType: isSet(object.eventType) ? protoEventTypeFromJSON(object.eventType) : 0,
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
    };
  },

  toJSON(message: EventPlayerScoreUpdate): unknown {
    const obj: any = {};
    if (message.eventType !== 0) {
      obj.eventType = protoEventTypeToJSON(message.eventType);
    }
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventPlayerScoreUpdate>, I>>(base?: I): EventPlayerScoreUpdate {
    return EventPlayerScoreUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventPlayerScoreUpdate>, I>>(object: I): EventPlayerScoreUpdate {
    const message = createBaseEventPlayerScoreUpdate();
    message.eventType = object.eventType ?? 0;
    message.playerId = object.playerId ?? "";
    message.score = object.score ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
