// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: game.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "game";

/** Базовые типы */
export interface Point {
  x: number;
  y: number;
}

export interface JoinGame {
  gameId: string;
  playerId: string;
}

export interface PlayerJoined {
  playerId: string;
}

export interface FireEvent {
  playerId: string;
  speed: number[];
  damage: number;
  weaponName: string;
  projectile: string;
  originPoint: Point | undefined;
  targetPoint: Point | undefined;
}

export interface WaveStartEvent {
  number: number;
  duration: number;
}

export interface SpawnEnemyEvent {
  id: string;
  enemyType: string;
  /** TODO: Добавить options */
  position: Point | undefined;
}

export interface EnemyDeathEvent {
  id: string;
}

export interface PlayerSetWeaponEvent {
  playerId: string;
  weaponType: string;
  ammo: number;
  maxAmmo: number;
}

export interface WeaponPurchasedEvent {
  playerId: string;
  weaponType: string;
  price: number;
}

export interface PlayerScoreUpdateEvent {
  playerId: string;
  score: number;
}

function createBasePoint(): Point {
  return { x: 0, y: 0 };
}

export const Point: MessageFns<Point> = {
  encode(message: Point, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x !== 0) {
      writer.uint32(13).float(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(21).float(message.y);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Point {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.x = reader.float();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.y = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Point {
    return {
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
    };
  },

  toJSON(message: Point): unknown {
    const obj: any = {};
    if (message.x !== 0) {
      obj.x = message.x;
    }
    if (message.y !== 0) {
      obj.y = message.y;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Point>, I>>(base?: I): Point {
    return Point.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Point>, I>>(object: I): Point {
    const message = createBasePoint();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    return message;
  },
};

function createBaseJoinGame(): JoinGame {
  return { gameId: "", playerId: "" };
}

export const JoinGame: MessageFns<JoinGame> = {
  encode(message: JoinGame, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameId !== "") {
      writer.uint32(10).string(message.gameId);
    }
    if (message.playerId !== "") {
      writer.uint32(18).string(message.playerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JoinGame {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinGame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gameId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JoinGame {
    return {
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : "",
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
    };
  },

  toJSON(message: JoinGame): unknown {
    const obj: any = {};
    if (message.gameId !== "") {
      obj.gameId = message.gameId;
    }
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JoinGame>, I>>(base?: I): JoinGame {
    return JoinGame.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JoinGame>, I>>(object: I): JoinGame {
    const message = createBaseJoinGame();
    message.gameId = object.gameId ?? "";
    message.playerId = object.playerId ?? "";
    return message;
  },
};

function createBasePlayerJoined(): PlayerJoined {
  return { playerId: "" };
}

export const PlayerJoined: MessageFns<PlayerJoined> = {
  encode(message: PlayerJoined, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerJoined {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerJoined();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerJoined {
    return { playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "" };
  },

  toJSON(message: PlayerJoined): unknown {
    const obj: any = {};
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerJoined>, I>>(base?: I): PlayerJoined {
    return PlayerJoined.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerJoined>, I>>(object: I): PlayerJoined {
    const message = createBasePlayerJoined();
    message.playerId = object.playerId ?? "";
    return message;
  },
};

function createBaseFireEvent(): FireEvent {
  return {
    playerId: "",
    speed: [],
    damage: 0,
    weaponName: "",
    projectile: "",
    originPoint: undefined,
    targetPoint: undefined,
  };
}

export const FireEvent: MessageFns<FireEvent> = {
  encode(message: FireEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    writer.uint32(18).fork();
    for (const v of message.speed) {
      writer.int32(v);
    }
    writer.join();
    if (message.damage !== 0) {
      writer.uint32(24).int32(message.damage);
    }
    if (message.weaponName !== "") {
      writer.uint32(34).string(message.weaponName);
    }
    if (message.projectile !== "") {
      writer.uint32(42).string(message.projectile);
    }
    if (message.originPoint !== undefined) {
      Point.encode(message.originPoint, writer.uint32(50).fork()).join();
    }
    if (message.targetPoint !== undefined) {
      Point.encode(message.targetPoint, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FireEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFireEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.speed.push(reader.int32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.speed.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.damage = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.weaponName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.projectile = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.originPoint = Point.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.targetPoint = Point.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FireEvent {
    return {
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      speed: globalThis.Array.isArray(object?.speed) ? object.speed.map((e: any) => globalThis.Number(e)) : [],
      damage: isSet(object.damage) ? globalThis.Number(object.damage) : 0,
      weaponName: isSet(object.weaponName) ? globalThis.String(object.weaponName) : "",
      projectile: isSet(object.projectile) ? globalThis.String(object.projectile) : "",
      originPoint: isSet(object.originPoint) ? Point.fromJSON(object.originPoint) : undefined,
      targetPoint: isSet(object.targetPoint) ? Point.fromJSON(object.targetPoint) : undefined,
    };
  },

  toJSON(message: FireEvent): unknown {
    const obj: any = {};
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.speed?.length) {
      obj.speed = message.speed.map((e) => Math.round(e));
    }
    if (message.damage !== 0) {
      obj.damage = Math.round(message.damage);
    }
    if (message.weaponName !== "") {
      obj.weaponName = message.weaponName;
    }
    if (message.projectile !== "") {
      obj.projectile = message.projectile;
    }
    if (message.originPoint !== undefined) {
      obj.originPoint = Point.toJSON(message.originPoint);
    }
    if (message.targetPoint !== undefined) {
      obj.targetPoint = Point.toJSON(message.targetPoint);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FireEvent>, I>>(base?: I): FireEvent {
    return FireEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FireEvent>, I>>(object: I): FireEvent {
    const message = createBaseFireEvent();
    message.playerId = object.playerId ?? "";
    message.speed = object.speed?.map((e) => e) || [];
    message.damage = object.damage ?? 0;
    message.weaponName = object.weaponName ?? "";
    message.projectile = object.projectile ?? "";
    message.originPoint = (object.originPoint !== undefined && object.originPoint !== null)
      ? Point.fromPartial(object.originPoint)
      : undefined;
    message.targetPoint = (object.targetPoint !== undefined && object.targetPoint !== null)
      ? Point.fromPartial(object.targetPoint)
      : undefined;
    return message;
  },
};

function createBaseWaveStartEvent(): WaveStartEvent {
  return { number: 0, duration: 0 };
}

export const WaveStartEvent: MessageFns<WaveStartEvent> = {
  encode(message: WaveStartEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.number !== 0) {
      writer.uint32(8).int32(message.number);
    }
    if (message.duration !== 0) {
      writer.uint32(16).int32(message.duration);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WaveStartEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWaveStartEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.number = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.duration = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WaveStartEvent {
    return {
      number: isSet(object.number) ? globalThis.Number(object.number) : 0,
      duration: isSet(object.duration) ? globalThis.Number(object.duration) : 0,
    };
  },

  toJSON(message: WaveStartEvent): unknown {
    const obj: any = {};
    if (message.number !== 0) {
      obj.number = Math.round(message.number);
    }
    if (message.duration !== 0) {
      obj.duration = Math.round(message.duration);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WaveStartEvent>, I>>(base?: I): WaveStartEvent {
    return WaveStartEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WaveStartEvent>, I>>(object: I): WaveStartEvent {
    const message = createBaseWaveStartEvent();
    message.number = object.number ?? 0;
    message.duration = object.duration ?? 0;
    return message;
  },
};

function createBaseSpawnEnemyEvent(): SpawnEnemyEvent {
  return { id: "", enemyType: "", position: undefined };
}

export const SpawnEnemyEvent: MessageFns<SpawnEnemyEvent> = {
  encode(message: SpawnEnemyEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.enemyType !== "") {
      writer.uint32(18).string(message.enemyType);
    }
    if (message.position !== undefined) {
      Point.encode(message.position, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpawnEnemyEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpawnEnemyEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.enemyType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.position = Point.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpawnEnemyEvent {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      enemyType: isSet(object.enemyType) ? globalThis.String(object.enemyType) : "",
      position: isSet(object.position) ? Point.fromJSON(object.position) : undefined,
    };
  },

  toJSON(message: SpawnEnemyEvent): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.enemyType !== "") {
      obj.enemyType = message.enemyType;
    }
    if (message.position !== undefined) {
      obj.position = Point.toJSON(message.position);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SpawnEnemyEvent>, I>>(base?: I): SpawnEnemyEvent {
    return SpawnEnemyEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SpawnEnemyEvent>, I>>(object: I): SpawnEnemyEvent {
    const message = createBaseSpawnEnemyEvent();
    message.id = object.id ?? "";
    message.enemyType = object.enemyType ?? "";
    message.position = (object.position !== undefined && object.position !== null)
      ? Point.fromPartial(object.position)
      : undefined;
    return message;
  },
};

function createBaseEnemyDeathEvent(): EnemyDeathEvent {
  return { id: "" };
}

export const EnemyDeathEvent: MessageFns<EnemyDeathEvent> = {
  encode(message: EnemyDeathEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnemyDeathEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnemyDeathEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnemyDeathEvent {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: EnemyDeathEvent): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EnemyDeathEvent>, I>>(base?: I): EnemyDeathEvent {
    return EnemyDeathEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EnemyDeathEvent>, I>>(object: I): EnemyDeathEvent {
    const message = createBaseEnemyDeathEvent();
    message.id = object.id ?? "";
    return message;
  },
};

function createBasePlayerSetWeaponEvent(): PlayerSetWeaponEvent {
  return { playerId: "", weaponType: "", ammo: 0, maxAmmo: 0 };
}

export const PlayerSetWeaponEvent: MessageFns<PlayerSetWeaponEvent> = {
  encode(message: PlayerSetWeaponEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    if (message.weaponType !== "") {
      writer.uint32(18).string(message.weaponType);
    }
    if (message.ammo !== 0) {
      writer.uint32(24).int32(message.ammo);
    }
    if (message.maxAmmo !== 0) {
      writer.uint32(32).int32(message.maxAmmo);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerSetWeaponEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetWeaponEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.weaponType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.ammo = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.maxAmmo = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetWeaponEvent {
    return {
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      weaponType: isSet(object.weaponType) ? globalThis.String(object.weaponType) : "",
      ammo: isSet(object.ammo) ? globalThis.Number(object.ammo) : 0,
      maxAmmo: isSet(object.maxAmmo) ? globalThis.Number(object.maxAmmo) : 0,
    };
  },

  toJSON(message: PlayerSetWeaponEvent): unknown {
    const obj: any = {};
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.weaponType !== "") {
      obj.weaponType = message.weaponType;
    }
    if (message.ammo !== 0) {
      obj.ammo = Math.round(message.ammo);
    }
    if (message.maxAmmo !== 0) {
      obj.maxAmmo = Math.round(message.maxAmmo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetWeaponEvent>, I>>(base?: I): PlayerSetWeaponEvent {
    return PlayerSetWeaponEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerSetWeaponEvent>, I>>(object: I): PlayerSetWeaponEvent {
    const message = createBasePlayerSetWeaponEvent();
    message.playerId = object.playerId ?? "";
    message.weaponType = object.weaponType ?? "";
    message.ammo = object.ammo ?? 0;
    message.maxAmmo = object.maxAmmo ?? 0;
    return message;
  },
};

function createBaseWeaponPurchasedEvent(): WeaponPurchasedEvent {
  return { playerId: "", weaponType: "", price: 0 };
}

export const WeaponPurchasedEvent: MessageFns<WeaponPurchasedEvent> = {
  encode(message: WeaponPurchasedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    if (message.weaponType !== "") {
      writer.uint32(18).string(message.weaponType);
    }
    if (message.price !== 0) {
      writer.uint32(24).int32(message.price);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WeaponPurchasedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWeaponPurchasedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.weaponType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.price = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WeaponPurchasedEvent {
    return {
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      weaponType: isSet(object.weaponType) ? globalThis.String(object.weaponType) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
    };
  },

  toJSON(message: WeaponPurchasedEvent): unknown {
    const obj: any = {};
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.weaponType !== "") {
      obj.weaponType = message.weaponType;
    }
    if (message.price !== 0) {
      obj.price = Math.round(message.price);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WeaponPurchasedEvent>, I>>(base?: I): WeaponPurchasedEvent {
    return WeaponPurchasedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WeaponPurchasedEvent>, I>>(object: I): WeaponPurchasedEvent {
    const message = createBaseWeaponPurchasedEvent();
    message.playerId = object.playerId ?? "";
    message.weaponType = object.weaponType ?? "";
    message.price = object.price ?? 0;
    return message;
  },
};

function createBasePlayerScoreUpdateEvent(): PlayerScoreUpdateEvent {
  return { playerId: "", score: 0 };
}

export const PlayerScoreUpdateEvent: MessageFns<PlayerScoreUpdateEvent> = {
  encode(message: PlayerScoreUpdateEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    if (message.score !== 0) {
      writer.uint32(16).int32(message.score);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerScoreUpdateEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerScoreUpdateEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.score = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerScoreUpdateEvent {
    return {
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
    };
  },

  toJSON(message: PlayerScoreUpdateEvent): unknown {
    const obj: any = {};
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerScoreUpdateEvent>, I>>(base?: I): PlayerScoreUpdateEvent {
    return PlayerScoreUpdateEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerScoreUpdateEvent>, I>>(object: I): PlayerScoreUpdateEvent {
    const message = createBasePlayerScoreUpdateEvent();
    message.playerId = object.playerId ?? "";
    message.score = object.score ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
